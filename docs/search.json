[{"path":"https://ncahill89.github.io/EIVmodels/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 EIVmodels authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/articles/CPTutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Bayesian Errors-in-Variables Change-Point Linear Regression","text":"going give starting point fitting Bayesian errors--variables, change-point regression model unevenly spaced time series data, assuming single change point measurement errors. ’ll start simulating data known change point ’ll see change-point model can detect .","code":""},{"path":"https://ncahill89.github.io/EIVmodels/articles/CPTutorial.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Bayesian Errors-in-Variables Change-Point Linear Regression","text":"Later use ggplot tidybayes packages, make sure load .","code":"library(EIVmodels) library(tidybayes) library(ggplot2)"},{"path":"https://ncahill89.github.io/EIVmodels/articles/CPTutorial.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model specification","title":"Bayesian Errors-in-Variables Change-Point Linear Regression","text":"comes model specification recipe, ingredients process model, relates expectation ’s underlying observed data. process model governed set parameters need estimated. data model, contains assumptions data generated incorporates data uncertainty. data model links observed data underlying process. Priors, contain assumptions parameters estimating. Priors can used impose constraints model parameters based apriori information. process model specification, ’ll assume expected value observed outcome, \\(y\\), changing linear relationship expected x, \\(\\mu_x\\), \\(\\mu_y = \\alpha + \\beta_1(\\mu_x - cp) \\hspace{2em} \\text{} \\mu_x < cp\\) \\(\\mu_y = \\alpha + \\beta_2(\\mu_x - cp) \\hspace{2em} \\text{} \\mu_x \\geq cp\\) words, linear relationship \\(\\mu_x\\) (expected value x) \\(mu_y\\) changes time point (cp). measurements \\(x\\) related \\(\\mu_x\\) via normal distribution \\(x \\sim N(\\mu_x,x_{err}^2)\\) \\(x_{err}\\) observed measurement errors. Note, subtracting change point (cp) \\(\\mu_x\\) regression equation can interpret intercept (\\(\\alpha\\)) expected value y point change point occurs. data model ’ll link observations process normal data model. \\(y \\sim N(\\mu_y, \\sigma^2)\\) measurement error ys , ’ll call \\(y_{err}\\), can update data model \\(y \\sim N(\\mu_y, \\sigma^2 + y_{err}^2)\\) priors need priors unknown parameters. prior change point constrain change point occur somewhere within range observation years. interested digging deeper model specification, JAGS specification particular model, otherwise feel free ignore next part move straight Simulate data section. Notes model setup: setup makes use step function JAGS decide \\(\\beta_1\\) \\(\\beta_2\\) required, step(x) = 1 \\(x\\geq 0\\) 0 otherwise. Normal distributions JAGS always specified precision parameter precision = 1/variance. ’ve add prediction step JAGS model get model-based predictions grid x values (\\(x_{pred}\\)).","code":"cp_model <- 'model{    ## data model     for(j in 1:n_obs)   {   y[j]~dnorm(mu_y[j],tau[j])   mu_y[j] <- alpha + beta[C[j]]*(mu_x[j]-cp)   C[j] <- 1+step(mu_x[j]-cp)      x[j] ~ dnorm(mu_x[j],x_err[j]^-2)   mu_x[j] ~ dnorm(0,0.5^-2)      tau[j] <- (y_err[j]^2 + sigma^2)^-1   }    ##Priors   alpha[1] ~ dnorm(0.0,10^-2)    beta[1]~dnorm(0.0,10^-2)   beta[2]~dnorm(0.0,10^-2)    sigma ~ dt(0,4^-2,1)T(0,)    cp ~ dunif(x_min,x_max)    for(i in 1:n_pred)   {   mu_pred[i] <-alpha + beta[Cstar[i]]*(x_pred[i]-cp)   Cstar[i] <- 1+step(x_pred[i]-cp)   } } '"},{"path":"https://ncahill89.github.io/EIVmodels/articles/CPTutorial.html","id":"simulate-data","dir":"Articles","previous_headings":"","what":"Simulate data","title":"Bayesian Errors-in-Variables Change-Point Linear Regression","text":"One best ways get feel model ’s limitations use simulations. can use EIVmodels package simulate data, measurement errors, single change point. ’m simulating 50 data points x ranges 0 2 (default), change point occurs value \\(x = 1\\), slope = 1.1 change point (\\(\\beta_1\\)) 0.1 change point (\\(\\beta_2\\)) . measurement errors \\(y\\) \\(x\\) set 0.1 0.2 respectively. output data contain simulated \\(x\\), \\(y\\) data well measurement errors supplied. also contain “true” underlying process, can used comparison purposes later. ’s can play around simulation changing parameter values get different datasets varying characteristics. Now, plot simulated data add true underlying process generated \\(y\\). fit change-point regression model trying estimate “Truth” line.","code":"cp_dat <- sim_cp(n_sim = 50,                  alpha = 0,                  beta = c(1.1,0.1),                  cp = 1,                  y_err = 0.1,                  x_err = 0.2) cp_dat ## # A tibble: 50 × 6 ##         x x_err       y y_err  true_y true_x ##     <dbl> <dbl>   <dbl> <dbl>   <dbl>  <dbl> ##  1 0.594    0.2 -0.560    0.1 -0.547   0.503 ##  2 0.0587   0.2 -0.788    0.1 -0.756   0.313 ##  3 0.268    0.2 -0.851    0.1 -0.675   0.386 ##  4 1.06     0.2  0.0385   0.1 -0.0770  0.930 ##  5 1.12     0.2  0.0165   0.1  0.0151  1.15  ##  6 0.962    0.2 -0.135    0.1 -0.177   0.839 ##  7 0.259    0.2 -0.933    0.1 -0.708   0.356 ##  8 0.359    0.2 -0.192    0.1 -0.193   0.824 ##  9 1.63     0.2 -0.0615   0.1  0.0712  1.71  ## 10 0.726    0.2  0.296    0.1  0.0119  1.12  ## # … with 40 more rows plot_dat(cp_dat,          add_truth = TRUE)"},{"path":"https://ncahill89.github.io/EIVmodels/articles/CPTutorial.html","id":"run-the-eiv-1-change-point-regression-model","dir":"Articles","previous_headings":"","what":"Run the EIV 1-change-point regression model","title":"Bayesian Errors-in-Variables Change-Point Linear Regression","text":"Now ’re going pretend simulated data real life data (.e., don’t know parameter values). want run model estimate parameters. can compare true values parameters posterior distribution parameters see model performs. can use EIVmodels package fit EIV change-point regression model using run_mod function. Specify model argument `model = “cp”.","code":"mod_eiv_cp <- run_mod(cp_dat,                       model = \"cp\") ## module glm loaded ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 100 ##    Unobserved stochastic nodes: 55 ##    Total graph size: 924 ##  ## Initializing model ## No convergence issues detected"},{"path":"https://ncahill89.github.io/EIVmodels/articles/CPTutorial.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Bayesian Errors-in-Variables Change-Point Linear Regression","text":"can plot results (add true line) using plot_res function follows:  access parameter summaries model need run par_est function. summary, q5 q95 provide upper lower bounds 90% uncertainty intervals. Note whether 90% uncertainty intervals contain true parameter values. like get detailed look posterior distributions parameters can pull posterior samples model object created can use tidybayes package create plots. First, get sample_draws contains posterior samples parameters model-based estimates expected value y. Now let’s look posterior distributions \\(\\beta_1\\) \\(\\beta_2\\) change-point (cp). ’ll use stat_halfeye() function tidybayes package.","code":"plot_res(mod_eiv_cp,          add_truth = TRUE) mod_cp_res <- par_est(mod = mod_eiv_cp) mod_cp_res$par_summary ## # A tibble: 5 × 10 ##   variable     mean   median     sd    mad       q5    q95  rhat ess_b…¹ ess_t…² ##   <chr>       <dbl>    <dbl>  <dbl>  <dbl>    <dbl>  <dbl> <dbl>   <dbl>   <dbl> ## 1 alpha    -0.00585 -0.00415 0.0613 0.0582 -0.109   0.0892 0.999    988.    824. ## 2 beta[1]   1.20     1.18    0.171  0.166   0.965   1.50   1.00     930.    787. ## 3 beta[2]   0.121    0.125   0.106  0.0959 -0.0516  0.286  0.999   1030.    909. ## 4 cp        0.838    0.834   0.103  0.106   0.674   1.02   0.999    962.    912. ## 5 sigma     0.0466   0.0394  0.0342 0.0320  0.00432 0.109  0.999    939.    943. ## # … with abbreviated variable names ¹​ess_bulk, ²​ess_tail mod_eiv_cp$sample_draws ## # A tibble: 3,000 × 59 ##    .chain .iterat…¹ .draw    alpha beta[…² beta[…³    cp devia…⁴ mu_pr…⁵ mu_pr…⁶ ##     <int>     <int> <int>    <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl> ##  1      1         1     1  6.41e-2   1.02  -0.0371 0.955   -65.2   -1.36   -1.31 ##  2      1         2     2 -1.72e-2   1.31   0.203  0.762   -54.5   -1.59   -1.53 ##  3      1         3     3 -1.13e-1   1.36   0.261  0.665   -60.6   -1.62   -1.55 ##  4      1         4     4  1.26e-2   1.03   0.158  0.916   -45.3   -1.39   -1.34 ##  5      1         5     5  6.65e-2   0.992  0.0648 0.986   -79.2   -1.35   -1.30 ##  6      1         6     6 -2.33e-5   1.24   0.0561 0.797   -60.1   -1.54   -1.48 ##  7      1         7     7 -2.99e-2   1.23   0.175  0.811   -85.4   -1.57   -1.51 ##  8      1         8     8  3.79e-2   1.21   0.0813 0.831   -50.5   -1.50   -1.44 ##  9      1         9     9  1.98e-2   1.30   0.0619 0.763   -65.6   -1.55   -1.48 ## 10      1        10    10 -6.09e-2   1.10   0.293  0.820   -65.2   -1.45   -1.39 ## # … with 2,990 more rows, 49 more variables: `mu_pred[3]` <dbl>, ## #   `mu_pred[4]` <dbl>, `mu_pred[5]` <dbl>, `mu_pred[6]` <dbl>, ## #   `mu_pred[7]` <dbl>, `mu_pred[8]` <dbl>, `mu_pred[9]` <dbl>, ## #   `mu_pred[10]` <dbl>, `mu_pred[11]` <dbl>, `mu_pred[12]` <dbl>, ## #   `mu_pred[13]` <dbl>, `mu_pred[14]` <dbl>, `mu_pred[15]` <dbl>, ## #   `mu_pred[16]` <dbl>, `mu_pred[17]` <dbl>, `mu_pred[18]` <dbl>, ## #   `mu_pred[19]` <dbl>, `mu_pred[20]` <dbl>, `mu_pred[21]` <dbl>, … ggplot(mod_eiv_cp$sample_draws, aes(x = `beta[1]`)) +   tidybayes::stat_halfeye() ggplot(mod_eiv_cp$sample_draws, aes(x = `beta[2]`)) +   tidybayes::stat_halfeye() ggplot(mod_eiv_cp$sample_draws, aes(x = cp)) +   tidybayes::stat_halfeye()"},{"path":"https://ncahill89.github.io/EIVmodels/articles/CPTutorial.html","id":"what-if-we-didnt-assume-the-eiv-component-in-the-model","dir":"Articles","previous_headings":"","what":"What if we didn’t assume the EIV component in the model?","title":"Bayesian Errors-in-Variables Change-Point Linear Regression","text":"wish ignore EIV component change-point model can use run_mod function EIVmodels package specify EIV = FALSE. can compare models truth.","code":"mod_cp <- run_mod(cp_dat,                   model = \"cp\",                   EIV = FALSE) ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 50 ##    Unobserved stochastic nodes: 5 ##    Total graph size: 809 ##  ## Initializing model ## No convergence issues detected plot_res(mod_cp,          mod_eiv_cp,          add_truth = TRUE)"},{"path":"https://ncahill89.github.io/EIVmodels/articles/CPTutorial.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Bayesian Errors-in-Variables Change-Point Linear Regression","text":"starting point developing Bayesian change-point regression models time dependent data measurement error. Using simulated data can helpful checking model expect .","code":""},{"path":"https://ncahill89.github.io/EIVmodels/articles/eivmodels.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Introduction to EIVmodels","text":"","code":"library(EIVmodels)"},{"path":"https://ncahill89.github.io/EIVmodels/articles/eivmodels.html","id":"example---simple-linear-regression","dir":"Articles","previous_headings":"","what":"Example - Simple Linear Regression","title":"Introduction to EIVmodels","text":"package provides options simulate data different types models measurement error x y variable. ’ll start simulating data linear regression model measurement error. default range \\(x\\) 0 2. ’m simulating 20 data points intercept (\\(\\alpha\\)) = 0, slope (\\(\\beta\\)) = 1. measurement errors \\(y\\) \\(x\\) set 0.1. output data contains simulated \\(x\\), \\(y\\) data well measurement errors supplied. also contain “true” underlying process, can used comparison purposes later. Next ’ll plot simulated data ’ll add true regression line plot adding argument add_truth = TRUE plot_dat() function.  Now ’ll fit errors--variables simple linear regression model data see close get estimating true data generating process. ’ll start creating model object specifying argument model = \"slr\". ’ll see messages progress bar pop JAGS model starts run. Now ’ll plot model-based estimates uncertainty. ’ll overlay “true” line comparison.  access data created plot, use: access summary parameter estimates, use:","code":"dat <- sim_slr(n_sim = 20,                alpha = 0,                beta = 1,                y_err = 0.1,                x_err = 0.1) dat ## # A tibble: 20 × 6 ##        x x_err     y y_err true_y true_x ##    <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl> ##  1 1.86    0.1 1.64    0.1  1.80   1.80  ##  2 1.18    0.1 1.18    0.1  1.21   1.21  ##  3 0.604   0.1 0.799   0.1  0.789  0.789 ##  4 1.29    0.1 1.01    0.1  1.11   1.11  ##  5 1.51    0.1 1.57    0.1  1.57   1.57  ##  6 0.967   0.1 1.05    0.1  1.02   1.02  ##  7 1.11    0.1 1.20    0.1  1.15   1.15  ##  8 0.209   0.1 0.314   0.1  0.352  0.352 ##  9 0.310   0.1 0.195   0.1  0.261  0.261 ## 10 1.66    0.1 1.57    0.1  1.54   1.54  ## 11 1.77    0.1 1.81    0.1  1.80   1.80  ## 12 0.610   0.1 0.701   0.1  0.639  0.639 ## 13 2.02    0.1 2.01    0.1  1.93   1.93  ## 14 1.49    0.1 1.31    0.1  1.43   1.43  ## 15 1.66    0.1 1.72    0.1  1.59   1.59  ## 16 0.983   0.1 0.793   0.1  0.941  0.941 ## 17 0.457   0.1 0.422   0.1  0.444  0.444 ## 18 1.74    0.1 1.67    0.1  1.80   1.80  ## 19 0.634   0.1 0.507   0.1  0.510  0.510 ## 20 0.693   0.1 0.513   0.1  0.612  0.612 plot_dat(dat,          add_truth = TRUE) mod_eiv_slr <- run_mod(dat,                        model = \"slr\") ## module glm loaded ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 40 ##    Unobserved stochastic nodes: 23 ##    Total graph size: 310 ##  ## Initializing model ## No convergence issues detected plot_res(mod_eiv_slr,          add_truth = TRUE) mod_reg_res <- par_est(mod = mod_eiv_slr) mod_reg_res$pred_summary ## # A tibble: 50 × 4 ##        x pred_y lwr_95 upr_95 ##    <dbl>  <dbl>  <dbl>  <dbl> ##  1 0.209  0.227 0.0868  0.363 ##  2 0.246  0.264 0.128   0.396 ##  3 0.283  0.301 0.168   0.428 ##  4 0.320  0.337 0.209   0.461 ##  5 0.357  0.373 0.248   0.494 ##  6 0.393  0.410 0.288   0.525 ##  7 0.430  0.446 0.329   0.558 ##  8 0.467  0.483 0.369   0.592 ##  9 0.504  0.520 0.409   0.624 ## 10 0.541  0.556 0.450   0.657 ## # … with 40 more rows mod_reg_res$par_summary ## # A tibble: 3 × 10 ##   variable   mean median     sd    mad       q5   q95  rhat ess_bulk ess_tail ##   <chr>     <dbl>  <dbl>  <dbl>  <dbl>    <dbl> <dbl> <dbl>    <dbl>    <dbl> ## 1 alpha    0.0174 0.0193 0.0819 0.0814 -0.118   0.151  1.00     932.     919. ## 2 beta     0.990  0.991  0.0654 0.0660  0.884   1.09   1.00     975.     955. ## 3 sigma    0.0538 0.0451 0.0399 0.0386  0.00581 0.125  1.00     970.     741."},{"path":"https://ncahill89.github.io/EIVmodels/articles/eivmodels.html","id":"example---using-real-data","dir":"Articles","previous_headings":"","what":"Example - Using real data","title":"Introduction to EIVmodels","text":"package contains dataset called NJ_CC subset sea level reconstruction New Jersey, USA (details full record can found paper). Note format dataset. format use data want apply models . Let’s plot data","code":"EIVmodels::NJ_CC ## # A tibble: 50 × 4 ##        x     y y_err x_err ##    <dbl> <dbl> <dbl> <dbl> ##  1  1509 -1.13  0.08  21   ##  2  1521 -1.12  0.07  20   ##  3  1532 -1.1   0.07  19   ##  4  1594 -1.05  0.06  15   ##  5  1604 -1     0.09  15   ##  6  1612 -0.97  0.09  13.5 ##  7  1645 -0.91  0.13   7.5 ##  8  1661 -0.91  0.09   6   ##  9  1687 -0.88  0.11  11   ## 10  1700 -0.85  0.11  11.5 ## # … with 40 more rows plot_dat(NJ_CC)"},{"path":"https://ncahill89.github.io/EIVmodels/articles/eivmodels.html","id":"eiv-simple-linear-regression","dir":"Articles","previous_headings":"Example - Using real data","what":"EIV simple linear regression","title":"Introduction to EIVmodels","text":"Let’s fit EIV simple linear regression model. data good idea scale age data. Dividing 1000 useful , relative sea level data (\\(y\\)) metres, dividing 1000 means slope (rate change) still easily interpreted relation original scale data. case slope can interpreted mm/yr. Let’s get parameter estimates Based model, rate sea level change 1.9 mm/yr (90% UI: 1.7 2.1 mm/yr) Now, let’s visualise results","code":"mod_eiv_slr <- run_mod(NJ_CC,                        model = \"slr\",                        scale_factor = 1000) ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 100 ##    Unobserved stochastic nodes: 53 ##    Total graph size: 582 ##  ## Initializing model ## No convergence issues detected mod_reg_res <- par_est(mod = mod_eiv_slr) mod_reg_res$par_summary ## # A tibble: 3 × 10 ##   variable    mean  median     sd    mad       q5     q95  rhat ess_bulk ##   <chr>      <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl> <dbl>    <dbl> ## 1 alpha    -4.11   -4.11   0.181  0.178  -4.42    -3.80   1.00     1018. ## 2 beta      1.93    1.93   0.100  0.0931  1.76     2.10   1.00     1005. ## 3 sigma     0.0171  0.0146 0.0132 0.0119  0.00135  0.0414 0.999     950. ## # … with 1 more variable: ess_tail <dbl> plot_res(mod_eiv_slr)"},{"path":"https://ncahill89.github.io/EIVmodels/articles/eivmodels.html","id":"eiv-change-point-linear-regression","dir":"Articles","previous_headings":"Example - Using real data","what":"EIV change-point linear regression","title":"Introduction to EIVmodels","text":"Let’s fit EIV change point linear regression model instead. need change model argument “cp”. Let’s get parameter estimates Now, let’s visualise results","code":"mod_eiv_cp <- run_mod(NJ_CC,                        model = \"cp\",                        scale_factor = 1000) ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 100 ##    Unobserved stochastic nodes: 55 ##    Total graph size: 986 ##  ## Initializing model ## No convergence issues detected mod_cp_res <- par_est(mod = mod_eiv_cp) mod_cp_res$par_summary ## # A tibble: 5 × 10 ##   variable    mean  median     sd    mad       q5     q95  rhat ess_bulk ##   <chr>      <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl> <dbl>    <dbl> ## 1 alpha    -0.589  -0.591  0.132  0.132  -0.821   -0.379  0.999     994. ## 2 beta[1]   1.49    1.52   0.239  0.220   1.06     1.84   0.999    1063. ## 3 beta[2]   4.22    3.67   1.99   0.917   2.56     8.56   1.00      996. ## 4 cp        1.87    1.87   0.0565 0.0521  1.77     1.96   0.999     960. ## 5 sigma     0.0147  0.0122 0.0115 0.0112  0.00112  0.0368 0.999     991. ## # … with 1 more variable: ess_tail <dbl> plot_res(mod_eiv_cp)"},{"path":"https://ncahill89.github.io/EIVmodels/articles/eivmodels.html","id":"eiv-gaussian-process","dir":"Articles","previous_headings":"Example - Using real data","what":"EIV Gaussian Process","title":"Introduction to EIVmodels","text":"Let’s fit EIV Gaussian process model. take longer run others (25 minutes NJ_CC data). Rates provided model approximated using method finite differences. rates interest recommended use EIV Integrated Gaussian Process model instead. Let’s visualise results   Let’s look output creates results plots Let’s check parameter estimates","code":"mod_eiv_gp <- run_mod(NJ_CC,                        model = \"gp\",                        scale_factor = 1000) plot_res(mod_eiv_gp) ## $p ##  ## $p_rate mod_gp_res <- par_est(mod = mod_eiv_gp) mod_gp_res$pred_summary ## # A tibble: 50 × 7 ##        x pred_y lwr_95 upr_95 rate_y rate_lwr_95 rate_upr_95 ##    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>       <dbl>       <dbl> ##  1 1509   -1.09  -1.24 -0.930  0.438     -0.827         1.85 ##  2 1519.  -1.08  -1.23 -0.936  0.462     -0.780         1.86 ##  3 1529.  -1.08  -1.21 -0.941  0.522     -0.655         1.86 ##  4 1539.  -1.07  -1.20 -0.944  0.580     -0.531         1.87 ##  5 1549.  -1.07  -1.19 -0.946  0.628     -0.425         1.87 ##  6 1559.  -1.06  -1.17 -0.946  0.685     -0.307         1.87 ##  7 1569.  -1.05  -1.16 -0.945  0.748     -0.202         1.87 ##  8 1578.  -1.04  -1.15 -0.943  0.803     -0.0902        1.87 ##  9 1588.  -1.04  -1.13 -0.939  0.853      0.0361        1.86 ## 10 1598.  -1.03  -1.12 -0.934  0.924      0.127         1.88 ## # … with 40 more rows mod_gp_res$par_summary ## # A tibble: 4 × 10 ##   variable   mean   median     sd    mad       q5    q95  rhat ess_bulk ess_tail ##   <chr>     <dbl>    <dbl>  <dbl>  <dbl>    <dbl>  <dbl> <dbl>    <dbl>    <dbl> ## 1 alpha    0.479  -0.00133 3.12   1.70   -3.65    6.49    1.00     891.     843. ## 2 phi      1.23    1.01    0.819  0.601   0.389   2.82    1.00     921.     955. ## 3 sigma    0.0148  0.0123  0.0113 0.0106  0.00138 0.0371  1.00    1032.     893. ## 4 sigma_g  3.24    2.37    2.82   1.88    0.600   8.83    1.00    1022.     992."},{"path":"https://ncahill89.github.io/EIVmodels/articles/eivmodels.html","id":"eiv-integrated-gaussian-process","dir":"Articles","previous_headings":"Example - Using real data","what":"EIV Integrated Gaussian Process","title":"Introduction to EIVmodels","text":"Let’s fit EIV integrated Gaussian process model. much richer model also take longer run simpler models (~ 12 minutes NJ_CC dataset). However, advantage provides underlying rate process directly model. Details model can found paper. Let’s visualise results   Let’s look output creates results plots Let’s check parameter estimates","code":"mod_eiv_igp <- run_mod(NJ_CC,                        model = \"igp\",                        scale_factor = 1000) plot_res(mod_eiv_igp) ## $p ##  ## $p_rate mod_igp_res <- par_est(mod = mod_eiv_igp) mod_igp_res$pred_summary ## # A tibble: 50 × 7 ##        x pred_y lwr_95 upr_95 rate_y rate_lwr_95 rate_upr_95 ##    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>       <dbl>       <dbl> ##  1 1509   -1.13  -1.21 -1.03   0.967     -0.145         2.06 ##  2 1519.  -1.11  -1.19 -1.03   0.989     -0.0733        2.02 ##  3 1529.  -1.10  -1.18 -1.03   1.01       0.0255        1.96 ##  4 1539.  -1.09  -1.16 -1.02   1.04       0.109         1.91 ##  5 1549.  -1.08  -1.15 -1.02   1.07       0.179         1.87 ##  6 1559.  -1.07  -1.13 -1.01   1.09       0.283         1.86 ##  7 1569.  -1.06  -1.12 -1.01   1.12       0.366         1.85 ##  8 1578.  -1.05  -1.11 -0.997  1.15       0.436         1.85 ##  9 1588.  -1.04  -1.09 -0.987  1.18       0.510         1.84 ## 10 1598.  -1.03  -1.08 -0.973  1.22       0.572         1.82 ## # … with 40 more rows mod_igp_res$par_summary ## # A tibble: 3 × 10 ##   variable   mean median     sd    mad      q5    q95  rhat ess_bulk ess_tail ##   <chr>     <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl> <dbl>    <dbl>    <dbl> ## 1 phi      0.163  0.149  0.0968 0.0960 0.0363  0.343  1.00     1021.     944. ## 2 sigma    0.0147 0.0126 0.0114 0.0115 0.00111 0.0387 0.999     947.     945. ## 3 sigma_g  2.82   2.43   1.69   1.42   0.843   6.00   1.00      991.     981."},{"path":"https://ncahill89.github.io/EIVmodels/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Niamh Cahill. Author, maintainer.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cahill N (2022). EIVmodels: Fit Errors--variables regression model. R package version 0.1.0, https://ncahill89.github.io/EIVmodels/.","code":"@Manual{,   title = {EIVmodels: Fit Errors-in-variables regression model},   author = {Niamh Cahill},   year = {2022},   note = {R package version 0.1.0},   url = {https://ncahill89.github.io/EIVmodels/}, }"},{"path":"https://ncahill89.github.io/EIVmodels/index.html","id":"eivmodels","dir":"","previous_headings":"","what":"Fit Errors-in-variables regression model","title":"Fit Errors-in-variables regression model","text":"statistics, errors--variables (EIV) models, measurement error models, models account measurement errors independent (predictor) dependent (outcome) variables. EIVmodels R package designed specifically account measurement errors within commonly used models (linear regression, change-point regression, (Integrated) Gaussian process regression) analysing time-dependent data derived paleoenvironmental reconstructions. models implemented Bayesian framework using JAGS (Just Another Gibbs Sampler) software.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Fit Errors-in-variables regression model","text":"package requires installation JAGS software. Click download JAGS.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Fit Errors-in-variables regression model","text":"See Vignettes.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit Errors-in-variables regression model","text":"package currently cran can download Github. Make sure devtools package installed execute following:","code":"devtools::install_github(\"ncahill89/EIVmodels\")"},{"path":"https://ncahill89.github.io/EIVmodels/reference/NJ_CC.html","id":null,"dir":"Reference","previous_headings":"","what":"A sea level reconstruction from New Jersey, USA. — NJ_CC","title":"A sea level reconstruction from New Jersey, USA. — NJ_CC","text":"dataset containing relative sea level (RSL) reconstruction, RSL error, age reconstruction agg error","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/NJ_CC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sea level reconstruction from New Jersey, USA. — NJ_CC","text":"","code":"NJ_CC"},{"path":"https://ncahill89.github.io/EIVmodels/reference/NJ_CC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A sea level reconstruction from New Jersey, USA. — NJ_CC","text":"data frame 50 rows 4 variables: x age, year CE y relative sea level metres x_err age error y_err RSL error","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/NJ_CC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A sea level reconstruction from New Jersey, USA. — NJ_CC","text":"https://cp.copernicus.org/articles/12/525/2016/","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/dat_to_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Format data for plotting — dat_to_plot","title":"Format data for plotting — dat_to_plot","text":"Format data plotting","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/dat_to_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format data for plotting — dat_to_plot","text":"","code":"dat_to_plot(raw_dat)"},{"path":"https://ncahill89.github.io/EIVmodels/reference/dat_to_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format data for plotting — dat_to_plot","text":"raw_dat Input data columns x,x_err,y,y_err","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/dat_to_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format data for plotting — dat_to_plot","text":"Data formatted plotting measurement errors","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/par_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameter estimates and model estimates — par_est","title":"Get parameter estimates and model estimates — par_est","text":"Get parameter estimates model estimates","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/par_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameter estimates and model estimates — par_est","text":"","code":"par_est(mod)"},{"path":"https://ncahill89.github.io/EIVmodels/reference/par_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameter estimates and model estimates — par_est","text":"mod Fitted model object run_mod","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/par_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameter estimates and model estimates — par_est","text":"List model estimates (pred_summary) parameter estimates (par_summary)","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/par_est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parameter estimates and model estimates — par_est","text":"","code":"dat <- sim_slr(n_sim = 30) mod <- run_mod(dat, model = \"slr\") #> module glm loaded #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 60 #>    Unobserved stochastic nodes: 33 #>    Total graph size: 380 #>  #> Initializing model #>  #> No convergence issues detected par_est(mod) #> $pred_summary #> # A tibble: 50 × 4 #>          x   pred_y  lwr_95 upr_95 #>      <dbl>    <dbl>   <dbl>  <dbl> #>  1 -0.0238 -0.0409  -0.165  0.0748 #>  2  0.0163  0.00137 -0.119  0.114  #>  3  0.0563  0.0432  -0.0721 0.155  #>  4  0.0964  0.0855  -0.0251 0.194  #>  5  0.137   0.128    0.0203 0.233  #>  6  0.177   0.170    0.0665 0.271  #>  7  0.217   0.212    0.111  0.310  #>  8  0.257   0.255    0.158  0.350  #>  9  0.297   0.298    0.205  0.389  #> 10  0.337   0.340    0.251  0.428  #> # … with 40 more rows #>  #> $par_summary #> # A tibble: 3 × 10 #>   variable    mean  median     sd    mad       q5    q95  rhat ess_bulk ess_tail #>   <chr>      <dbl>   <dbl>  <dbl>  <dbl>    <dbl>  <dbl> <dbl>    <dbl>    <dbl> #> 1 alpha    -0.0171 -0.0157 0.0596 0.0577 -0.119   0.0822 0.999    1036.     942. #> 2 beta      1.06    1.05   0.0524 0.0523  0.978   1.15   1.00     1183.    1067. #> 3 sigma     0.0659  0.0627 0.0406 0.0434  0.00600 0.138  0.999     946.     938. #>"},{"path":"https://ncahill89.github.io/EIVmodels/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ncahill89.github.io/EIVmodels/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot data with measurement uncertainty (in y and x variables) — plot_dat","title":"Plot data with measurement uncertainty (in y and x variables) — plot_dat","text":"Plot data measurement uncertainty (y x variables)","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot data with measurement uncertainty (in y and x variables) — plot_dat","text":"","code":"plot_dat(dat, BP_scale = FALSE, add_truth = FALSE)"},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot data with measurement uncertainty (in y and x variables) — plot_dat","text":"dat Input data columns x,x_err,y,y_err add_truth Logical argument add \"True\" data generating process plot. set True using simulated data sim_slr, sim_cp sim_gp.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot data with measurement uncertainty (in y and x variables) — plot_dat","text":"Plot data measurement errors","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot data with measurement uncertainty (in y and x variables) — plot_dat","text":"","code":"dat <- sim_slr(n_sim = 30) plot_dat(dat)"},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of data plus model estimates (and credible intervals) — plot_res","title":"Plot of data plus model estimates (and credible intervals) — plot_res","text":"Plot data plus model estimates (credible intervals)","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of data plus model estimates (and credible intervals) — plot_res","text":"","code":"plot_res(mod1, mod2 = NULL, add_truth = FALSE)"},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of data plus model estimates (and credible intervals) — plot_res","text":"mod1 fitted model run_mod mod2 optional second fitted model run_mod comparison add_truth Logical argument add \"True\" data generating process plot. set True using simulated data sim_dat","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of data plus model estimates (and credible intervals) — plot_res","text":"p","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/plot_res.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of data plus model estimates (and credible intervals) — plot_res","text":"","code":"dat <- sim_slr(n_sim = 30) mod <- run_mod(dat, model = \"slr\") #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 60 #>    Unobserved stochastic nodes: 33 #>    Total graph size: 380 #>  #> Initializing model #>  #> No convergence issues detected plot_res(mod)"},{"path":"https://ncahill89.github.io/EIVmodels/reference/run_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit errors-in-variables models with JAGS — run_mod","title":"Fit errors-in-variables models with JAGS — run_mod","text":"Fit errors--variables models JAGS","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/run_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit errors-in-variables models with JAGS — run_mod","text":"","code":"run_mod(   dat,   model = \"slr\",   EIV = TRUE,   BP_scale = FALSE,   n_cp = 1,   igp_smooth = 0.2,   iter = 5000,   burnin = 1000,   thin = 4,   scale_factor_x = 1,   scale_factor_y = 1 )"},{"path":"https://ncahill89.github.io/EIVmodels/reference/run_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit errors-in-variables models with JAGS — run_mod","text":"dat Input data columns x,x_err,y,y_err model model run. Choose slr, cp, gp, igp EIV Indicate whether use EIV framework. Defaults TRUE n_cp Number change points model = \"cp\" chosen. Can choose 1,2,3,4. igp_smooth Informs prior smoothness (correlation) parameter model = \"igp\" chosen. Choose value 0 1. Closer 1 increase smoothness. iter MCMC iterations burnin MCMC burnin thin MCMC thinning scale_factor_x value divide predictor (x) change scale. 1 result change. 1000 recommended x years. scale_factor_y value divide response (y) change scale. 1 result change.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/run_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit errors-in-variables models with JAGS — run_mod","text":"List data, JAGS input data, model output name model file.","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/run_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit errors-in-variables models with JAGS — run_mod","text":"","code":"dat <- sim_slr(n_sim = 30) mod <- run_mod(dat, model = \"slr\") #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 60 #>    Unobserved stochastic nodes: 33 #>    Total graph size: 380 #>  #> Initializing model #>  #> No convergence issues detected"},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_cp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data with measurment error from a change-point linear regression — sim_cp","title":"Simulate data with measurment error from a change-point linear regression — sim_cp","text":"Simulate data measurment error change-point linear regression","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_cp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data with measurment error from a change-point linear regression — sim_cp","text":"","code":"sim_cp(   n_sim = 50,   min_x = 0,   max_x = 2,   alpha = 0,   beta = c(1, 2),   cp = 1,   sigma = 0.1,   x_err = 0.1,   y_err = 0.1 )"},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_cp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data with measurment error from a change-point linear regression — sim_cp","text":"n_sim Number data points simulate min_x Minimum x value max_x Maximum x value alpha Regression intercept beta Regression slope cp Change point sigma Nugget variation x_err x measurement error y_err y measurement error","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_cp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data with measurment error from a change-point linear regression — sim_cp","text":"Simulated dataset columns x, x_err, y, y_err","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_cp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data with measurment error from a change-point linear regression — sim_cp","text":"","code":"sim_cp(n_sim = 50) #> # A tibble: 50 × 6 #>         x x_err       y y_err  true_y true_x #>     <dbl> <dbl>   <dbl> <dbl>   <dbl>  <dbl> #>  1 1.78     0.1  1.64     0.1  1.59    1.79  #>  2 1.00     0.1 -0.0191   0.1  0.0862  1.04  #>  3 1.57     0.1  1.06     0.1  1.07    1.53  #>  4 1.34     0.1  0.712    0.1  0.674   1.34  #>  5 0.0671   0.1 -0.845    0.1 -0.900   0.100 #>  6 1.39     0.1  0.777    0.1  0.849   1.42  #>  7 0.509    0.1 -0.589    0.1 -0.477   0.523 #>  8 0.809    0.1 -0.261    0.1 -0.131   0.869 #>  9 0.735    0.1 -0.258    0.1 -0.167   0.833 #> 10 1.41     0.1  0.727    0.1  0.669   1.33  #> # … with 40 more rows"},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data with measurment error from a Gaussian process regression — sim_gp","title":"Simulate data with measurment error from a Gaussian process regression — sim_gp","text":"Simulate data measurment error Gaussian process regression","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data with measurment error from a Gaussian process regression — sim_gp","text":"","code":"sim_gp(   n_sim = 50,   min_x = 0,   max_x = 2,   alpha = 0,   sigma_g = 2,   phi = 2,   sigma = 0.1,   x_err = 0.1,   y_err = 0.1 )"},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data with measurment error from a Gaussian process regression — sim_gp","text":"n_sim number data points simulate min_x Minimum x value max_x Maximum x value alpha regression intercept sigma_g GP variance parameter phi GP correlation parameter sigma nugget variation x_err x measurement error y_err y measurement error","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data with measurment error from a Gaussian process regression — sim_gp","text":"Simulated dataset columns x, x_err, y, y_err","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data with measurment error from a Gaussian process regression — sim_gp","text":"","code":"sim_gp(n_sim = 50) #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 4000 iterations... #> Running the model for 1 iterations... #> Simulation complete #> Finished running the simulation #> # A tibble: 50 × 6 #>          x x_err     y y_err true_y true_x #>      <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl> #>  1  0.0210   0.1 3.85    0.1   3.77 0.0211 #>  2 -0.0995   0.1 3.70    0.1   3.66 0.0468 #>  3  0.138    0.1 3.71    0.1   3.59 0.0616 #>  4  0.107    0.1 3.69    0.1   3.47 0.0841 #>  5 -0.0188   0.1 3.17    0.1   3.14 0.133  #>  6  0.383    0.1 2.07    0.1   1.69 0.329  #>  7  0.419    0.1 1.84    0.1   1.59 0.346  #>  8  0.422    0.1 1.70    0.1   1.56 0.351  #>  9  0.222    0.1 1.18    0.1   1.34 0.392  #> 10  0.452    0.1 0.838   0.1   1.15 0.436  #> # … with 40 more rows"},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data with measurment error from a simple linear regression — sim_reg","title":"Simulate data with measurment error from a simple linear regression — sim_reg","text":"Simulate data measurment error simple linear regression","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data with measurment error from a simple linear regression — sim_reg","text":"","code":"sim_reg(   n_sim = 50,   min_x = 0,   max_x = 2,   alpha = 0,   beta = 1,   sigma = 0.1,   x_err = 0.1,   y_err = 0.1 )"},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data with measurment error from a simple linear regression — sim_reg","text":"n_sim Number data points simulate min_x Minimum x value max_x Maximum x value alpha Regression intercept beta Regression slope sigma Nugget variation x_err x measurement error y_err y measurement error","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data with measurment error from a simple linear regression — sim_reg","text":"Simulated dataset columns x, x_err, y, y_err","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data with measurment error from a simple linear regression — sim_reg","text":"","code":"sim_reg(n_sim = 50) #> # A tibble: 50 × 6 #>        x x_err     y y_err true_line true_x #>    <dbl> <dbl> <dbl> <dbl>     <dbl>  <dbl> #>  1 0.579   0.1 0.562   0.1     0.617  0.617 #>  2 0.933   0.1 1.18    0.1     0.845  0.845 #>  3 0.777   0.1 0.917   0.1     0.947  0.947 #>  4 1.23    0.1 1.36    0.1     1.33   1.33  #>  5 0.557   0.1 0.599   0.1     0.671  0.671 #>  6 1.45    0.1 1.49    0.1     1.52   1.52  #>  7 0.508   0.1 0.455   0.1     0.516  0.516 #>  8 0.512   0.1 0.253   0.1     0.326  0.326 #>  9 1.04    0.1 1.01    0.1     1.06   1.06  #> 10 1.10    0.1 0.920   0.1     0.985  0.985 #> # … with 40 more rows"},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_slr.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data with measurment error from a simple linear regression — sim_slr","title":"Simulate data with measurment error from a simple linear regression — sim_slr","text":"Simulate data measurment error simple linear regression","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_slr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data with measurment error from a simple linear regression — sim_slr","text":"","code":"sim_slr(   n_sim = 50,   min_x = 0,   max_x = 2,   alpha = 0,   beta = 1,   sigma = 0.1,   x_err = 0.1,   y_err = 0.1 )"},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_slr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data with measurment error from a simple linear regression — sim_slr","text":"n_sim Number data points simulate min_x Minimum x value max_x Maximum x value alpha Regression intercept beta Regression slope sigma Nugget variation x_err x measurement error y_err y measurement error","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_slr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data with measurment error from a simple linear regression — sim_slr","text":"Simulated dataset columns x, x_err, y, y_err","code":""},{"path":"https://ncahill89.github.io/EIVmodels/reference/sim_slr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data with measurment error from a simple linear regression — sim_slr","text":"","code":"sim_slr(n_sim = 50) #> # A tibble: 50 × 6 #>        x x_err        y y_err true_y true_x #>    <dbl> <dbl>    <dbl> <dbl>  <dbl>  <dbl> #>  1 0.725   0.1  0.668     0.1 0.693  0.693  #>  2 0.326   0.1  0.220     0.1 0.226  0.226  #>  3 0.419   0.1  0.425     0.1 0.368  0.368  #>  4 1.67    0.1  1.69      0.1 1.65   1.65   #>  5 1.99    0.1  1.84      0.1 1.95   1.95   #>  6 1.86    0.1  2.00      0.1 1.87   1.87   #>  7 0.635   0.1  0.672     0.1 0.671  0.671  #>  8 1.89    0.1  1.91      0.1 1.86   1.86   #>  9 0.122   0.1 -0.00850   0.1 0.0543 0.0543 #> 10 0.946   0.1  1.07      0.1 1.07   1.07   #> # … with 40 more rows"}]
